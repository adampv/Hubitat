/**
 *  
 *	Haseman DRS6-AI 6 Relay Switch Device Type - For use on Hubitat
 *  
 *	Author: Adam Vine
 *	Date: 2020-02-012 
 */
 
metadata {
definition (name: "Haseman DRS6-AI 6 Relay Switch", namespace: "hubitat", author: "Adam Vine") {
capability "Switch"
capability "Relay Switch"
capability "Polling"
capability "Configuration"
capability "Refresh"
capability "Zw Multichannel"
capability "TemperatureMeasurement"

attribute "switch1", "string"
attribute "switch2", "string"
attribute "switch3", "string"
attribute "switch4", "string"
attribute "switch5", "string"
attribute "switch6", "string"
attribute "binarySensor", "string"

command "on1"
command "off1"
command "on2"
command "off2"
command "on3"
command "off3"
command "on4"
command "off4"
command "on5"
command "off5"
command "on6"
command "off6"
command "testButton"
command "refreshBinary"
command "indRefresh1"
command "indRefresh2"
command "indRefresh3"    
command "indRefresh4"
command "indRefresh5" 
command "indRefresh6"   
    
    
    
command "updateSingleParam" // This custom command can be used with Rule Machine or webCoRE, to send parameter values (paramNr & paramvalue) to the device

fingerprint deviceId: "0x1001", inClusters:"0x5E,0x20,0x25,0x30,0x71,0x31,0x70,0x85,0x8E,0x60,0x7A,0x5A,0x59,0x73,0x86,0x72", outClusters: "0x20"

}
    
 
}

def parse(String description) {
    def result = []
    def cmd = zwave.parse(description)
    if (cmd) {
        result += zwaveEvent(cmd)
     //   log.debug "Parsed ${cmd} to ${result.inspect()}"
    } else {
     //   log.debug "Non-parsed event: ${description}"
    }
    return result
}


def zwaveEvent(hubitat.zwave.commands.basicv1.BasicSet cmd) {
   //  log.debug(cmd)
    sendEvent(name: "switch", value: cmd.value ? "on" : "off", type: "digital")
  /*  def result = []
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:2, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:3, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:4, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:5, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:6, commandClass:37, command:2).format()
    response(delayBetween(result, 1000)) // returns the result of reponse() */
}

def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd)
{
  //  log.debug(cmd)
    sendEvent(name: "switch", value: cmd.value ? "on" : "off", type: "digital")
  /*  def result = []
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:2, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:3, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:4, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:5, commandClass:37, command:2).format()
    result << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:6, commandClass:37, command:2).format()
    response(delayBetween(result, 500)) // returns the result of reponse()*/
}


def zwaveEvent(hubitat.zwave.commands.multichannelv3.MultiChannelCapabilityReport cmd) 
{
    
  //  log.debug("multichannelv3.MultiChannelCapabilityReport endPoint = ${cmd.endPoint}, genericDeviceClass = ${cmd.genericDeviceClass}, specificDeviceClass = ${cmd.specificDeviceClass}")
   /* 
    if (cmd.endPoint == 2 ) {
        def currstate = device.currentState("switch2").getValue()
        if (currstate == "on")
        	sendEvent(name: "switch2", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        	sendEvent(name: "switch2", value: "on", isStateChange: true, display: false)
    }
    else if (cmd.endPoint == 1 ) {
        def currstate = device.currentState("switch1").getValue()
        if (currstate == "on")
        sendEvent(name: "switch1", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        sendEvent(name: "switch1", value: "on", isStateChange: true, display: false)
    }
    else if (cmd.endPoint == 3 ) {
        def currstate = device.currentState("switch3").getValue()
        if (currstate == "on")
        sendEvent(name: "switch3", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        sendEvent(name: "switch3", value: "on", isStateChange: true, display: false)
    }
    else if (cmd.endPoint == 4 ) {
        def currstate = device.currentState("switch4").getValue()
        if (currstate == "on")
        sendEvent(name: "switch4", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        sendEvent(name: "switch4", value: "on", isStateChange: true, display: false)
    }
        else if (cmd.endPoint == 5 ) {
        def currstate = device.currentState("switch5").getValue()
        if (currstate == "on")
        sendEvent(name: "switch5", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        sendEvent(name: "switch5", value: "on", isStateChange: true, display: false)
    }
        else if (cmd.endPoint == 6 ) {
        def currstate = device.currentState("switch6").getValue()
        if (currstate == "on")
        sendEvent(name: "switch6", value: "off", isStateChange: true, display: false)
        else if (currstate == "off")
        sendEvent(name: "switch6", value: "on", isStateChange: true, display: false)
    }*/
}

def zwaveEvent(hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
 //  log.debug("encap at ${cmd}")
    def map = [ name: "switch$cmd.sourceEndPoint" ]
    def currstate = "off"
       if (cmd.sourceEndPoint == 2 ) {

           if (cmd.parameter.first() > 180){
        	sendEvent(name: "switch2", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
           }
         
           else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch2", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
           }
       }
  
           else if (cmd.sourceEndPoint == 1 ) {

        if (cmd.parameter.first() > 180){
        	sendEvent(name: "switch1", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
        }
        else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch1", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
        }
           }
     else if (cmd.sourceEndPoint == 3 ) {

        if (cmd.parameter.first() > 180){
        	sendEvent(name: "switch3", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
        }
        else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch3", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
        }
     }
     else if (cmd.sourceEndPoint == 4 ) {

        if (cmd.parameter.first() > 180){
        	sendEvent(name: "switch4", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
        }
        else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch4", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
        } 
     }
      else if (cmd.sourceEndPoint == 5 ) {

        if (cmd.parameter.first() > 180){
         //   log.debug("got here")
        	sendEvent(name: "switch5", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
        }
        else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch5", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
        } 
      }
     else if (cmd.sourceEndPoint == 6 ) {

        if (cmd.parameter.first() > 180){
        	sendEvent(name: "switch6", value: "on", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "on" || currstate2 == "on" || currstate3 == "on" || currstate4 == "on" || currstate5 == "on" || currstate6 == "on"){
               sendEvent(name: "switch", value: "on", isStateChange: true, display: false)
           }
        }
        else if (cmd.parameter.first() == 0){
        	sendEvent(name: "switch6", value: "off", isStateChange: true, display: false)
            currstate1 = device.currentState("switch1").getValue()
            currstate2 = device.currentState("switch2").getValue()
            currstate3 = device.currentState("switch3").getValue()
            currstate4 = device.currentState("switch4").getValue()
            currstate5 = device.currentState("switch5").getValue()
            currstate6 = device.currentState("switch6").getValue()
            if (currstate1 == "off" && currstate2 == "off" && currstate3 == "off" && currstate4 == "off" && currstate5 == "off" && currstate6 == "off"){
               sendEvent(name: "switch", value: "off", isStateChange: true, display: false)
           }
        }
    }
  /*  switch(cmd.commandClass) {
      case 32:
         if (cmd.parameter == [0]) {
            map.value = "off"
         }
         if (cmd.parameter == [255]) {
            map.value = "on"
         }
         createEvent(map)
         break
      case 37:
         if (cmd.parameter == [0]) {
            map.value = "off"
         }
         if (cmd.parameter == [255]) {
            map.value = "on"
         }
         break
    }
    def events = [createEvent(map)]
    if (map.value == "on") {
            events += [createEvent([name: "switch", value: "on"])]
    } else {
         def allOff = true
         (1..2).each { n ->
             if (n != cmd.sourceEndPoint) {
                 if (device.currentState("switch${n}").value != "off") allOff = false
             }
         }
         if (allOff) {
             events += [createEvent([name: "switch", value: "off"])]
         }
    }
    events*/
    
  //  zwave.wakeUpV2.wakeUpNoMoreInformation().format()
}

def zwaveEvent(hubitat.zwave.Command cmd) {
    // This will capture any commands not handled by other instances of zwaveEvent
    // and is recommended for development so you can see every command the device sends
  //   log.debug(cmd)
    return createEvent(descriptionText: "${device.displayName}: ${cmd}")
}

def zwaveEvent(hubitat.zwave.commands.switchallv1.SwitchAllReport cmd) {
 //  log.debug "SwitchAllReport $cmd"
}


def zwaveEvent(hubitat.zwave.commands.sensorbinaryv2.SensorBinaryReport cmd)
{
   if (cmd.sensorValue == 0 ) {
       sendEvent(name: "binarySensor", value: "off", isStateChange: true, display: false)
   }
   else if(cmd.sensorValue == 255 ) {
       sendEvent(name: "binarySensor", value: "on", isStateChange: true, display: false)
   }
}

def zwaveEvent(hubitat.zwave.commands.notificationv3.NotificationReport cmd)
{

       if (cmd.notificationType == 6 && event == 23 ) {
       sendEvent(name: "binarySensor", value: "off", isStateChange: true, display: false)
   }
   else if(cmd.notificationType == 6 && cmd.event == 22 ) {
       sendEvent(name: "binarySensor", value: "on", isStateChange: true, display: false)
   }
}

def refresh() {
    
	def cmds = []
	cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:32, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:32, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:32, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:4, commandClass:32, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:32, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:2).format()
    cmds << zwave.sensorBinaryV2.sensorBinaryGet().format() 
    
	delayBetween(cmds, 600) 

    
}

def refreshBinary() {
    zwave.sensorBinaryV2.sensorBinaryGet().format() 
}

def testButton(){
    //  zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:0, commandClass:32, command:1, parameter:[0]).format()
 //zwave.multiChannelV3.multiChannelCapabilityGet(endPoint:1).format()
 //   zwave.sensorBinaryV2.sensorBinaryGet().format() 
//    zwave.sensorMultilevelV5.sensorMultilevelGet().format()
//    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:2).format()
    
  //  zwave.wakeUpV2.wakeUpIntervalSet(nodeid:zwaveHubNodeId, seconds: 6048000).format() 
  //  zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType: 2).format()
  
    
    
    def cmds = []
  //  cmds +=  zwave.notificationV3.notificationSupportedGet().format()
 //   cmds +=  zwave.configurationV1.configurationSet(parameterNumber: 72, configurationValue:[0, 0, 128, 1], size:4).format()
  //  cmds +=  zwave.configurationV1.configurationGet(parameterNumber: 72).format()
   // cmds +=  zwave.configurationV1.configurationGet(parameterNumber: 1).format()
 //   cmds +=  zwave.configurationV1.configurationGet(parameterNumber: 2).format()
   // cmds +=  zwave.configurationV1.configurationGet(parameterNumber: 20).format()

      cmds +=  zwave.notificationV3.notificationSet(sensorType:2, notificationStatus:0).format()
    
        if (cmds) return delayBetween(cmds, 750)
    
}

def zwaveEvent(hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	//log.debug "msr: $msr"
    updateDataValue("MSR", msr)
}

def zwaveEvent(hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd){
// log.debug(cmd)
   // zwave.wakeUpV2.wakeUpNoMoreInformation().format() 
    
}


def poll() {
	def cmds = []
	cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:3, destinationEndPoint:3, commandClass:37, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:5, destinationEndPoint:5, commandClass:37, command:2).format()
    cmds << zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:6, destinationEndPoint:6, commandClass:37, command:2).format()
   // cmds << zwave.sensorMultilevelV2.sensorMultilevelGet().format()
    cmds << zwave.sensorBinaryV2.sensorBinaryGet().format()
  //  cmds << zwave.sensorMultilevelV2.sensorMultilevelGet(sensorType:1, scale:1).format()
	delayBetween(cmds, 700)
}

def configure() {
//	log.debug "Executing 'configure'"
    
  /*  delayBetween([
        zwave.configurationV1.configurationGet(parameterNumber:1).format(),
        zwave.configurationV1.configurationGet(parameterNumber:2).format(),
        zwave.configurationV1.configurationGet(parameterNumber:3).format(),
        zwave.configurationV1.configurationGet(parameterNumber:4).format(),
        zwave.configurationV1.configurationGet(parameterNumber:5).format(),
        zwave.configurationV1.configurationGet(parameterNumber:6).format(),
        zwave.configurationV1.configurationGet(parameterNumber:7).format(), 
        zwave.associationV1.associationGet().format(),
      
    ],500)  */
}

def updateSingleparam(paramNum, paramValue) {
//	log.debug "Updating single Parameter (paramNum: $paramNum, paramValue: $paramValue)"
    	zwave.configurationV1.configurationSet(parameterNumber: paramNum, ConfigurationValue: paramValue)
}

/**
* Triggered when Save button is pushed on Preference UI
*/
def updated()
{
//	log.debug "Preferences have been changed. Attempting configure()"
 //   def cmds = configure()
 //   response(cmds)
}
def on() { 
   delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:3, destinationEndPoint:3, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:3, destinationEndPoint:3, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:5, destinationEndPoint:5, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:5, destinationEndPoint:5, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:6, destinationEndPoint:6, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:6, destinationEndPoint:6, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format(),
        zwave.switchAllV1.switchAllOn().format()

    ], 500)
}
def off() {
   delayBetween([
        
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:3, destinationEndPoint:3, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:5, destinationEndPoint:5, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:6, destinationEndPoint:6, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:2, destinationEndPoint:2, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:1, destinationEndPoint:1, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:3, destinationEndPoint:3, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:5, destinationEndPoint:5, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:6, destinationEndPoint:6, commandClass:37, command:2).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:2).format(), 
        zwave.switchAllV1.switchAllOff().format()

    ], 550)
}

def on1() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:37, command:2).format()
    ], 500)
}

def off1() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:37, command:2).format()
    ], 500)
}

def on2() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:37, command:2).format()
    ], 500)
}

def off2() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:37, command:2).format()
    ], 500)
}

def on3() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:37, command:2).format()
    ], 500)
}

def off3() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:37, command:2).format()
    ], 500)
}

def on4() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:4, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:4, commandClass:37, command:2).format()
    ], 500)
}

def off4() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(sourceEndPoint:4, destinationEndPoint:4, commandClass:37, command:2).format()
    ], 500)
}
def on5() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:37, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:37, command:2).format()
    ], 500)
}

def off5() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:37, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:37, command:2).format()
    ], 500)
}
def on6() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:1, parameter:[255]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:2).format(),
        zwave.wakeUpV2.wakeUpNoMoreInformation().format()
    ], 500)
}

def off6() {
    delayBetween([
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:1, parameter:[0]).format(),
        zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:32, command:2).format(),
        zwave.wakeUpV2.wakeUpNoMoreInformation().format()
    ], 500)
}

def indRefresh1() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:1, commandClass:37, command:2).format()
}

def indRefresh2() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:2, commandClass:37, command:2).format()
}

def indRefresh3() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:3, commandClass:37, command:2).format()
}

def indRefresh4() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:4, commandClass:37, command:2).format()
}

def indRefresh5() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:5, commandClass:37, command:2).format()
}

def indRefresh6() {
    zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:6, commandClass:37, command:2).format()
}
